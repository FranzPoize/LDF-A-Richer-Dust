{"version":3,"sources":["main.js"],"names":["window","getProjects","then","fonts","family","find","font","name","variant","variants","template","values","ptypoFont","prototypo","Ptypo","default","createFont","createdFont","changeParams","text","$","calculateValue","param","freqValue","getParamByFreq","chosenFreq","updateFont","_","debounce","low","med","high","changeParam","isRaf","soundAllowed","stream","persistAudioStream","audioContent","AudioContext","webkitAudioContext","audioStream","createMediaStreamSource","analyser","createAnalyser","connect","fftSize","frequencyArray","Uint8Array","frequencyBinCount","lastMedValue","lastLowValue","lastHighValue","doDraw","requestAnimationFrame","getByteFrequencyData","adjustedLength","updateTrigger","i","Math","floor","total","adjustedLow","adjustedMed","adjustedHigh","abs","on","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","audio","console","log","mediaDevices","listening"],"mappings":"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","file":"main.js","sourcesContent":["// Permet de récupérer les projets d'un compte prototypo\nwindow['prototypo-projects'].getProjects('email', 'password').then(function (fonts) {\n    // Recherche la famille dans la liste de projets\n    var family = fonts.find(function (font) {\n        return font.name === 'Familyname';\n    });\n    // Recherche la variante dans les variantes de la famille\n    var variant = family && family.variants.find(function (variant) {\n        return variant.name === 'VariantName';\n    });\n    // Récupère les valeurs nécessaires à initialiser la police\n    var template = family.template;\n    var values = variant.values;\n    var ptypoFont;\n\n    var prototypo = new Ptypo.default('b1f4fb23-7784-456e-840b-f37f5a647b1c');\n    // Crée une font 'testfont' en utilisant le template récupéré\n    // la font 'testfont' a étée ajoutée à la page en css via une font-family\n    prototypo.createFont('testfont', template).then(function (createdFont) {\n        ptypoFont = createdFont;\n        // Change les paramètres de la font créée en utilisant les valeurs récupérées du compte\n        createdFont.changeParams(values);\n    });\n\n    var text = $('.text p').text();\n\n    /**************************GESTION DU SON *******************/\n    /************************************************************/\n\n    // Permet de calculer une valeur \"réaliste\" pour le paramètre en fonction de la valeur de fréquence reçue\n    var calculateValue = function (param, freqValue) {\n        switch (param) {\n            case 'thickness':\n                return freqValue / 3 + 4;\n                break;\n            case 'width':\n                return (freqValue / 230) + 0.45;\n                break;\n            case 'xHeight':\n                return (freqValue * 1.5) + 400;\n                break;\n            case 'curviness':\n                return (freqValue / 160);\n                break;\n            case 'slant':\n                return (freqValue / 10) - 3;\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Permet de sélectionner quel paramète on souhaite associer à la fréquence\n    var getParamByFreq = function (chosenFreq) {\n        switch (chosenFreq) {\n            case 'Low':\n                return 'thickness';\n                break;\n            case 'Medium':\n                return 'width';\n                break;\n            case 'High':\n                return 'slant';\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Fonction appelée pendant l'analyse du flux audio permettant de changer les paramètres de la police pour chaque fréquence\n    var updateFont = _.debounce(function (low, med, high) {\n        if (low !== 0) {\n            ptypoFont.changeParam(getParamByFreq('Low'), calculateValue(getParamByFreq('Low'), low), text)\n        }\n        if (med != 0) {\n            ptypoFont.changeParam(getParamByFreq('Medium'), calculateValue(getParamByFreq('Medium'), med), text)\n        }\n        if (high !== 0) {\n            ptypoFont.changeParam(getParamByFreq('High'), calculateValue(getParamByFreq('High'), high), text)\n        }\n    }, 10);\n\n    var isRaf = false;\n\n\n    // Fonction exécutée si la capture audio est acceptée, lance l'analyse\n    var soundAllowed = function (stream) {\n\n        // Configuration de l'analyse du stream\n        window.persistAudioStream = stream;\n        var audioContent = new (window.AudioContext || window.webkitAudioContext)();\n        var audioStream = audioContent.createMediaStreamSource(stream);\n        var analyser = audioContent.createAnalyser();\n        audioStream.connect(analyser);\n        analyser.fftSize = 1024;\n        var frequencyArray = new Uint8Array(analyser.frequencyBinCount);\n        var lastMedValue = 0;\n        var lastLowValue = 0;\n        var lastHighValue = 0;\n\n        // Boucle d'analyse\n        var doDraw = function () {\n            if (!isRaf) {\n                requestAnimationFrame(doDraw);\n            }\n            isRaf = true;\n            analyser.getByteFrequencyData(frequencyArray);\n            var adjustedLength;\n            var updateTrigger = 20;\n            // On ne travaille que sur les premières valeurs de l'objet, on le compresse.\n            for (var i = 0; i < 255; i++) {\n                adjustedLength = Math.floor(frequencyArray[i]) - (Math.floor(frequencyArray[i]) % 5);\n            }\n            // low : les 10 premiers blocs des 255\n            var total = 0;\n            for (var i = 1; i < 10; i++) {\n                total += frequencyArray[i];\n            }\n            var low = total / 9;\n            // On ajuste la valeur pour faciliter les calculs de paramètres\n            var adjustedLow = Math.floor(low) - (Math.floor(low) % 5);\n            //medium : les 10 suivants\n            total = 0;\n            for (var i = 11; i < 21; i++) {\n                total += frequencyArray[i];\n            }\n            var med = total / 10;\n            // On ajuste la valeur pour faciliter les calculs de paramètres\n            var adjustedMed = Math.floor(med) - (Math.floor(med) % 5);\n            // high : les 10 suivants\n            total = 0;\n            for (var i = 30; i < 40; i++) {\n                total += frequencyArray[i];\n            }\n            var high = total / 10;\n            // On ajuste la valeur pour faciliter les calculs de paramètres\n            var adjustedHigh = Math.floor(high) - (Math.floor(high) % 5);\n\n            // Si la différence capturée de son est suffisante, on met à jour la fonte\n            if (Math.abs(lastLowValue - low) > updateTrigger || Math.abs(lastMedValue - med) > updateTrigger || Math.abs(lastHighValue - high) > updateTrigger) {\n\n                updateFont(adjustedLow, adjustedMed, adjustedHigh);\n                isRaf = false;\n            } else {\n                isRaf = false;\n            }\n\n        }\n        doDraw();\n    }\n\n    // Configuration de l'accès au micro\n    $('.js-button-getAudio').on('click', function () {\n        if (navigator.getUserMedia) {\n            window.navigator = window.navigator || {};\n            navigator.getUserMedia = navigator.getUserMedia ||\n                navigator.webkitGetUserMedia ||\n                navigator.mozGetUserMedia ||\n                null\n            navigator.getUserMedia({ audio: true }, soundAllowed, function () { console.log('sound not allowed') });\n        } else if (navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia({ audio: true })\n                .then(function (stream) {\n                    if (!listening) {\n                        soundAllowed(stream);\n                    }\n                })\n        }\n    });\n\n});\n\n\n/****************Librairie Prototypo **************/\n\n// createFont(fontName, fontTemplate)\n// crée une fonte 'fontName' utilisable en CSS via une balise font-family en utilisant le template 'fontTemplate'\n\n\n// ptypofont.changeParam(paramName, paramValue, subset)\n// Change le paramètre 'paramname' de la font 'ptypofont' en lui donnant la valeur 'paramValue';\n// Possibilité de limiter les caractères modifiés en donnant un 'subset' : chaîne de caractères, pas besoin que ça soit unique\n\n// ptypofont.changeParams(paramObj, subset)\n// Change les paramètres de la font 'ptypofont' selon l'objet de paramètres donné\n// {'thickness': 110, 'width': 1}\n// Possibilité de limiter les caractères modifiés en donnant un 'subset' : chaîne de caractères, pas besoin que ça soit unique\n\n\n// ptypofont.tween(paramName, paramValue, steps, aDuration, cb, subset)\n// Anime la fonte 'ptypofont' pendant 'aDuration' secondes en faisant varier 'steps' fois le 'paramName' jusqu'à 'paramValue'\n// Renvoie 'cb' (fonction) quand terminé\n// Possibilité de limiter les caractères modifiés en donnant un 'subset' : chaîne de caractères, pas besoin que ça soit unique\n\n// ptypofont.getArrayBuffer()\n// Renvoie l'arrayBufer de la font 'ptypofont'\n\n// ptypofont.reset(subset)\n// Réinitialise la font 'ptypofont' en lui redonnant les valeurs du template de base\n// Possibilité de limiter les caractères modifiés en donnant un 'subset' : chaîne de caractères, pas besoin que ça soit unique\n\n"]}